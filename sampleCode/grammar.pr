

binOpOperator:= defined in token.hpp
unaryOpOperator:= defined in token.hpp
postFixUnaryOpOperator:= defined in token.hpp

  NOTE: unaryOp * and - can be distinguished from binaryOp * and - based on the previous token
  if there is a binOpOperator or unaryOpOperator before it, it is unary. if there is an expression, binary


identifier:= not a keyword, can start with a letter or underscore, can have letters underscores and numbers following
keywords:= defined in token.hpp

expression:= identifier | number | stringLiteral | charLiteral | binOp | unaryOp | functionCall | arrayAccess | (expression) | memberAccess
expressionList:= expression expressionTail
expressionTail:= , expression expressionTail | nothing

memberAccess:= identifier . identifier
                            | functionCall
                            | arrayAccess

arrayAccess:= identifier [ expression ]

binOp:= expression binOpOperator expression
unaryOp:= unaryOpOperator expression | expression postFixUnaryOpOperator

functionCall:= identifier (expressionList)

containerLiteral:= [ expressionList ]

typeQualifier:= mut | const | nothing
typeList: typeQualifier identifier indirectionTypeList

indirectionTypeList:= nothing
                    | typeQualifier ptr indirectionTypeList
                    | typeQualifier containerLiteral indirectionTypeList
                    | typeQualifier ref

simpleVarDec:= identifier : typeList
initialization:=  = expression
                  | containerLiteral
varDec:= simpleVarDec initialization
                    | nothing

scope:= { statementList }

forLoop:= for (expression | varDec | nothing ; expression | nothing; expression | nothing) scope
whileLoop:= while (expression) scope

conditionalStatement:= ifStatement elifStatementList
                      | ifStatement elifStatementList elseStatement

ifStatement:= if (expression) scope
elifStatement:= elif (expression) scope
elifStatementList:= elifStatement elifStatementList | nothing
elseStatement:= else scope
returnStatement:= return expression;
switchStatement:=  switch (identifier) switchScope

controlFlowStatement:= forLoop | whileLoop | conditionalStatement | returnStatement | switchStatement

statement:= expression; | controlFlowStatement | scope | varDec 
statementList:= statement statementList | nothing

functionDec:= func identifier (varDecList): typeList scope

varDecList:= varDec varDecTail
varDecTail:= , varDec varDecTail | nothing

structDec:= struct identifier { structDecList }

structDecList:= varDec ; decList | functionDec decList | nothing

enumDec:= enum identifier { identifierList }

identifierList:= identifier identifierTail
                | nothing
identifierTail:= , identifier identifierTail

templateDec:= template [ identifierList ] structDec
                                         | functionDec

templateCreation:= create identifier [ identifierList ] as identifier ;

program:= globalDecList

globalDec:= structDec | varDec ; | functionDec | enumDec | templateDec | templateCreation
globalDecList:= globalDec globalDecList | nothing

