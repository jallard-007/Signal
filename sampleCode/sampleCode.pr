template [T] struct vectorTemplate {
  data : T ptr;
  size : int32;

  func findMax() : T {
    max : T = 0;
    for (i : int = 0; i < arr->size; ++i) {
      if (this->data[i] > max) {
        max = arr[i];
      }
    }
    return max;
  }

  func findMin(): T {
    min : T = 0;
    for (i : int32 = 0; i < arr->size; ++i) {
      if (this->data[i] < min) {
        min = arr[i];
      }
    }
    return min;
  }
}

template [T] struct cd {
  data : T ptr;
  size : int32;

  func findMax() : T {
    max : T = 0;
    for (i : int32 = 0; i < arr->size; ++i) {
      if (this->data[i] > max) {
        max = arr[i];
      }
    }
    return max;
  }

  func findMin(): T {
    min : T = 0;
    for (i : int32 = 0; i < arr->size; ++i) {
      if (this->data[i] < min) {
        min = arr[i];
      }
    }
    return min;
  }
}

func main(): int32 {
  {
    arraySize: int32 = 9;
    data: int32 ptr = [-3 , 23, 21, 554, 3, 6, -234, 123, 43];
    vector: intVector;
    vector.arr = data;
    vector.size = arraySize;
    max: int32 = vector.findMax();
    min: int32 = vector.findMin();
    print(max);
    print('\n');
    print(min);
  }

  {
    arraySize: int32 = 4;
    data: double ptr = [-3.4, 23.2, 21.3, 43.8];
    vector: intVector;
    vector.arr = data;
    vector.size = arraySize;
    max : double = vector.findMax();
    min: double = vector.findMin();
    print(max);
    print("\n");
    print(min);
  }

}

struct Type { type : uint8 ; }
struct Token { type : uint8 ; }

func getType(type: Type ref): Token {
  tp: Token = tokenizer.peekNext();
  prev: TokenList ptr = nullptr;
  curr: TokenList ptr = @type.tokens;
  while (tp.type != TokenType.END_OF_FILE) {
    if (isTypeDelimiter(tp.type)) {
      if (curr->next) {
        memPool.release(curr->next);
        curr->next = nullptr;
      }
      if (curr && curr->curr.type == TokenType.NOTHING) {
        prev->next = nullptr;
        memPool.release(curr);
      }
      break;
    }
    tokenizer.consumePeek();
    curr->curr = tp;
    curr->next = memPool.getTokenList();
    prev = curr;
    curr = curr->next;
    tp = tokenizer.peekNext();
  }
  return tp;
}

func moveToNewLine(): void {
  for (; position < size; ++position) {
    if (content[position] == '\n') {
      ++lineNum;
      lineStart = position + 1;
      return;
    }
  }
}

func movePastLiteral(delimiter: char): bool {
  prev: char = content[position];
  prevPrev: char = content[position];
  for (++position; position < size; ++position) {
    c: char = content[position];
    if (c == '\n') {
      ++position;
      return false;
    }
    if (c == delimiter && !(prev == '\\' && prevPrev != '\\')) {
      ++position;
      return true;
    }
    prevPrev = prev;
    prev = c;
  }
  return false;
}

func yuh(): void {
  if (++position < size) {
    cNext: char = content[position++];
    if (c == '|' && cNext == '|') {
      type = LOGICAL_OR;
    } elif (c == '&' && cNext == '&') {
      type = LOGICAL_AND;
    } elif (cNext == '=') {
      newType: TokenType = charWithEqualToType.at(c);
      if (newType != NOTHING) {
        type = newType;
      } else {
        --position;
      }
    } elif (c == '<' && cNext == '<') {
      if (position < size && content[position] == '=') {
        type = SHIFT_LEFT_ASSIGNMENT;
        ++position;
      } else {
        type = SHIFT_LEFT;
      }
    } elif (c == '>' && cNext == '>') {
      if (position < size && content[position] == '=') {
        type = SHIFT_RIGHT_ASSIGNMENT;
        ++position;
      } else {
        type = SHIFT_RIGHT;
      }
    } elif (c == '-') {
      if (cNext == '>') {
        type = PTR_MEMBER_ACCESS;
      }
      elif (cNext == '-') {
        if (prevType == IDENTIFIER || prevType == CLOSE_PAREN || prevType == CLOSE_BRACKET) {
          type = DECREMENT_POSTFIX;
        } else {
          type = DECREMENT_PREFIX;
        }
      } else {
        if (prevType == IDENTIFIER ||
          isLiteral(prevType) ||
          prevType == CLOSE_PAREN ||
          prevType == CLOSE_BRACE) {
          type = SUBTRACTION;
        } else {
          type = NEGATIVE;
          --position;
        }
      }
    } elif (c == '+' && cNext == '+') {
      if (prevType == IDENTIFIER || prevType == CLOSE_PAREN || prevType == CLOSE_BRACE) {
        type = INCREMENT_POSTFIX;
      } else {
        type = INCREMENT_PREFIX;
      }
    }
    else {
      --position;
      if (c == '*' && (prevType == OPEN_BRACE || prevType == OPEN_PAREN || prevType == OPEN_BRACKET || isBinaryOp(prevType))) {
        type = DEREFERENCE;
      }
    }
  }
}

struct Tokenizer {j : char; }
struct string {j : char; }

func prettyPrint(tk: Tokenizer ref, str: string ref, indentation: uint32): void {
  str += typeToString.at(keyword.type);
  if (keyword.type == RETURN) {
    if (header.type != NONE) {
      str += ' ';
    }
  }
  header.prettyPrint(tk, str, indentation);
  if (keyword.type == IF || keyword.type == FOR || keyword.type == ELIF || keyword.type == WHILE) {
    str += ' ';
  }
  if (keyword.type != RETURN) {
    body.prettyPrint(tk, str, indentation);
  }

  ### // another  func's content ###

  movePastKeywordOrIdentifier();
  if (length >= MIN_CHARS_TO_DISAMBIG) {
    type = IDENTIFIER;
  } else {
    # + 1 for null termination
    chars: char;
    chars[0] = c;
    for (i: uint32_t = tokenStartPos + 1; i < position && j < MIN_CHARS_TO_DISAMBIG; ++i) {
      chars[j] = content[i];
    }
    if (stringToType.find(chars) != stringToType.end()) {
      type = stringToType.at(chars);
    } else {
      type = IDENTIFIER;
    }
  }
}
