# does binary search on the newline list to find the line number
func getTokenPositionInfo(tk: Token ref): TokenPositionInfo {
  if (newlinePositions.empty()) {
    return {1, tk.position + 1};
  }
  high: uint32 = newlinePositions.size() - 1;
  low: uint32 = 0;
  middle: uint32 = high / 2;
  while (low < high) {
    if (tk.position < newlinePositions[middle]) {
      high = middle - 1;
    }
    elif (tk.position >= newlinePositions[middle + 1]) {
      low = middle + 1;
    }
    else {
      return {middle + 1, tk.position + 1 - newlinePositions[middle]};
    }
    middle = (high + low) / 2;
  }
  return {high + 1, tk.position + 1 - newlinePositions[high]};
}

func tokenizeAll(tokens: TokenVector ref): void {
  while (tokens.emplace_back(tokenizeNext()).type != TokenType.END_OF_FILE) {}
}


func peekNext(): Token {
  if (peeked.type != TokenType.NONE) {
    return peeked;
  }
  peeked = tokenizeNext();
  return peeked;
}

func consumePeek(): void {
  peeked.type = TokenType.NONE;
}

func tokenizeNext(): Token {
  if (peeked.type != TokenType.NONE) {
    temp: Token = peeked;
    consumePeek();
    peeked.type = TokenType.NONE;
    return temp;
  }
  moveToNextNonWhiteSpaceChar();
  tokenStartPos: uint32 = position;
  c: char = content[position];
  if (c < 0) {
    exit(1);
  }
  type: TokenType = numToType[c];
  switch (type) {
    case TokenType.IDENTIFIER {
      switch (c) {
        case 'a' {
          if (content[++position] == 's') {
            END_OF_IDENTIFIER(TokenType.AS);
          }
          movePastIdentifier();
          break;
        }
        case 'b' {
          if (content[++position] == 'r' &&
            content[++position] == 'e' &&
            content[++position] == 'a' &&
            content[++position] == 'k'
          ) {
            END_OF_IDENTIFIER(TokenType.BREAK);
          }
          elif (
            content[position] == 'o' &&
            content[++position] == 'o' &&
            content[++position] == 'l'
          ) {
            END_OF_IDENTIFIER(TokenType.BOOL);
          }
          movePastIdentifier();
          break;
        }
        case 'c' {
          if (content[++position] == 'a') {
            if (content[++position] == 's' && content[++position] == 'e') {
              END_OF_IDENTIFIER(TokenType.CASE);
            }
          }
          elif (content[position] == 'r') {
            if (
              content[++position] == 'e' &&
              content[++position] == 'a' &&
              content[++position] == 't' &&
              content[++position] == 'e'
            ) {
              END_OF_IDENTIFIER(TokenType.CREATE);
            }
          }
          elif (content[position] == 'o') {
            if (
              content[++position] == 'n' &&
              content[++position] == 't' &&
              content[++position] == 'i' &&
              content[++position] == 'n' &&
              content[++position] == 'u' &&
              content[++position] == 'e'
            ) {
              END_OF_IDENTIFIER(TokenType.CONTINUE);
            }
          }
          elif (content[position] == 'h') {
            if (content[++position] == 'a' && content[++position] == 'r') {
              END_OF_IDENTIFIER(TokenType.CHAR_TYPE);
            }
          }
          movePastIdentifier();
          break;
        }
        case 'd' {
          if (content[++position] == 'e') {
            if (content[++position] == 'f' &&
            content[++position] == 'a' &&
            content[++position] == 'u' &&
            content[++position] == 'l' &&
            content[++position] == 't'
            ) {
              END_OF_IDENTIFIER(TokenType.DEFAULT);
            }
          }
          elif (
            content[position] == 'o' &&
            content[++position] == 'u' &&
            content[++position] == 'b' &&
            content[++position] == 'l' &&
            content[++position] == 'e'
          ) {
            END_OF_IDENTIFIER(TokenType.DOUBLE_TYPE);
          }
          movePastIdentifier();
          break;
        }
        case 'e' {
          if (content[++position] == 'l') {
            if (content[++position] == 'i') {
              if (content[++position] == 'f') {
                END_OF_IDENTIFIER(TokenType.ELIF);
              }
            } elif (content[position] == 's' && content[++position] == 'e') {
              END_OF_IDENTIFIER(TokenType.ELSE);
            }
          }
          elif (content[position] == 'n') {
            if (content[++position] == 'u' && content[++position] == 'm') {
              END_OF_IDENTIFIER(TokenType.ENUM);
            }
          }
          elif (content[position] == 'x') {
            if (content[++position] == 't') {
              if (
                content[++position] == 'e' &&
                content[++position] == 'r' &&
                content[++position] == 'n'
              ) {
                END_OF_IDENTIFIER(TokenType.EXTERN);
              }
            } elif (content[position] == 'i' && content[++position] == 't') {
                END_OF_IDENTIFIER(TokenType.EXIT);
            }
          }
          movePastIdentifier();
          break;
        }
        case 'f' {
          if (content[++position] == 'a') {
            if (
              content[++position] == 'l' &&
              content[++position] == 's' &&
              content[++position] == 'e'
            ) {
              END_OF_IDENTIFIER(TokenType.FALSE);
            }
          }
          elif (content[position] == 'o') {
            if (content[++position] == 'r') {
              END_OF_IDENTIFIER(TokenType.FOR);
            }
          }
          elif (content[position] == 'u') {
            if (content[++position] == 'n' && content[++position] == 'c') {
              END_OF_IDENTIFIER(TokenType.FUNC);
            }
          }
          movePastIdentifier();
          break;
        }
        case 'i' {
          if (content[++position] == 'f') {
            END_OF_IDENTIFIER(TokenType.IF);
          }
          elif (content[position] == 'n') {
            if (content[++position] == 't') {
              if (content[++position] == '8') {
                END_OF_IDENTIFIER(TokenType.INT8_TYPE);
              } elif (content[position] == '1') {
                if (content[++position] == '6') {
                  END_OF_IDENTIFIER(TokenType.INT16_TYPE);
                }
              } elif (content[position] == '3') {
                if (content[++position] == '2') {
                  END_OF_IDENTIFIER(TokenType.INT32_TYPE);
                }
              } elif (content[position] == '6') {
                if (content[++position] == '4') {
                  END_OF_IDENTIFIER(TokenType.INT64_TYPE);
                }
              }
            } elif (
              content[position] == 'c' &&
              content[++position] == 'l' &&
              content[++position] == 'u' &&
              content[++position] == 'd' &&
              content[++position] == 'e'
            ) {
              END_OF_IDENTIFIER(TokenType.INCLUDE);
            }
          }
          movePastIdentifier();
          break;
        }
        case 'n' {
          if (
            content[++position] == 'u' &&
            content[++position] == 'l' &&
            content[++position] == 'l' &&
            content[++position] == 'p' &&
            content[++position] == 't' &&
            content[++position] == 'r'
          ) {
            END_OF_IDENTIFIER(TokenType.NULL_PTR);
          }
          movePastIdentifier();
          break;
        }
        case 'p' {
          if (content[++position] == 't' && content[++position] == 'r') {
            END_OF_IDENTIFIER(TokenType.POINTER);
          }
          movePastIdentifier();
          break;
        }
        case 'r' {
          if (content[++position] == 'e') {
            if (content[++position] == 't') {
              if (
                content[++position] == 'u' &&
                content[++position] == 'r' && 
                content[++position] == 'n'
              ) {
                END_OF_IDENTIFIER(TokenType.RETURN);
              }
            } elif (content[position] == 'f') {
              END_OF_IDENTIFIER(TokenType.REFERENCE);
            }
          }
          movePastIdentifier();
          break;
        }
        case 's' {
          if (content[++position] == 'w') {
            if (
              content[++position] == 'i' &&
              content[++position] == 't' &&
              content[++position] == 'c' &&
              content[++position] == 'h'
            ) {
              END_OF_IDENTIFIER(TokenType.SWITCH);
            }
          }
          elif (
            content[position] == 't' &&
            content[++position] == 'r' &&
            content[++position] == 'u' &&
            content[++position] == 'c' &&
            content[++position] == 't'
          ) {
            END_OF_IDENTIFIER(TokenType.STRUCT);
          }
          movePastIdentifier();
          break;
        }
        case 't' {
          if (content[++position] == 'r') {
            if (content[++position] == 'u' && content[++position] == 'e') {
              END_OF_IDENTIFIER(TokenType.TRUE);
            }
          } elif (
            content[position] == 'e' &&
            content[++position] == 'm' &&
            content[++position] == 'p' &&
            content[++position] == 'l' &&
            content[++position] == 'a' &&
            content[++position] == 't' &&
            content[++position] == 'e'
          ) {
            END_OF_IDENTIFIER(TokenType.TEMPLATE);
          }
          movePastIdentifier();
          break;
        }
        case 'u' {
          if (
            content[++position] == 'i' &&
            content[++position] == 'n' &&
            content[++position] == 't'
          ) {
            if (content[++position] == '8') {
              END_OF_IDENTIFIER(TokenType.UINT8_TYPE);
            } elif (content[position] == '1') {
              if (content[++position] == '6') {
                END_OF_IDENTIFIER(TokenType.UINT16_TYPE);
              }
            } elif (content[position] == '3') {
              if (content[++position] == '2') {
                END_OF_IDENTIFIER(TokenType.UINT32_TYPE);
              }
            } elif (content[position] == '6') {
              if (content[++position] == '4') {
                END_OF_IDENTIFIER(TokenType.UINT64_TYPE);
              }
            }
          }
          movePastIdentifier();
          break;
        }
        case 'v' {
          if (
            content[++position] == 'o' &&
            content[++position] == 'i' &&
            content[++position] == 'd'
          ) {
            END_OF_IDENTIFIER(TokenType.VOID);
          }
          movePastIdentifier();
          break;
        }
        case 'w' {
          if (
            content[++position] == 'h' &&
            content[++position] == 'i' &&
            content[++position] == 'l' &&
            content[++position] == 'e'
          ) {
            END_OF_IDENTIFIER(TokenType.WHILE);
          }
          movePastIdentifier();
          break;
        }
        default {
          movePastIdentifier();
          break;
        }
      }
      break;
    }

    case TokenType.END_OF_FILE {
      break;
    }

    case TokenType.STRING_LITERAL {
      if (!movePastLiteral('"')) {
        posInfo: TokenPositionInfo = getTokenPositionInfo({position, 0, TokenType.STRING_LITERAL});
        exit(1);
      }
      break;
    }

    case TokenType.CHAR_LITERAL {
      if (!movePastLiteral('\'')) {
        TokenPositionInfo posInfo = getTokenPositionInfo({position, 0, TokenType.CHAR_LITERAL});
        exit(1);
      }
      break;
    }

    case TokenType.COMMENT: {
      movePastNewLine();
      return tokenizeNext();
    }

    case TokenType.NEWLINE: {
      newlinePositions.emplace_back(++position);
      return tokenizeNext();
    }

    case TokenType.DECIMAL_NUMBER: {
      if (c == '0' && position + 1 < content.size()) {
        c = content[++position];
        if (c == 'x') {
          type = TokenType.HEX_NUMBER;
          movePastHexNumber();
        } else {
          if (c == 'b') {
            type = TokenType.BINARY_NUMBER;
          } else {
            type = TokenType.DECIMAL_NUMBER;
            --position;
          }
          movePastNumber();
        }
      } else {
        type = TokenType.DECIMAL_NUMBER;
        movePastNumber();
      }
      break;
    }
  
    case TokenType.BAD_VALUE: {
      exit(1);
    }

    default: {
      tNext: TokenType = numToType[(uint8)content[++position]];
      switch (type) {
        case TokenType.NOT: {
          if (tNext == TokenType.ASSIGNMENT) {
            ++position;
            type = TokenType.NOT_EQUAL;
          }
          break;
        }
        case TokenType.BITWISE_XOR: {
          if (tNext == TokenType.ASSIGNMENT) {
            ++position;
            type = TokenType.BITWISE_XOR_ASSIGNMENT;
          }
          break;
        }
        case TokenType.MODULO: {
          if (tNext == TokenType.ASSIGNMENT) {
            ++position;
            type = TokenType.MODULO_ASSIGNMENT;
          }
          break;
        }
        case TokenType.ASSIGNMENT: {
          if (tNext == TokenType.ASSIGNMENT) {
            ++position;
            type = TokenType.EQUAL;
          }
          break;
        }
        case TokenType.DIVISION: {
          if (tNext == TokenType.ASSIGNMENT) {
            ++position;
            type = TokenType.DIVISION_ASSIGNMENT;
          }
          break;
        }
        case TokenType.BITWISE_OR: {
          if (tNext == TokenType.BITWISE_OR) {
            type = TokenType.LOGICAL_OR;
            ++position;
          } elif (tNext == TokenType.ASSIGNMENT) {
            type = TokenType.BITWISE_OR_ASSIGNMENT;
            ++position;
          }
          break;
        }
        case TokenType.BITWISE_AND: {
          if (tNext == TokenType.BITWISE_AND) {
            type = TokenType.LOGICAL_AND;
            ++position;
          } elif (tNext == TokenType.ASSIGNMENT) {
            type = TokenType.BITWISE_AND_ASSIGNMENT;
            ++position;
          }
          break;
        }
        case TokenType.LESS_THAN: {
          if (tNext == TokenType.LESS_THAN) {
            ++position;
            if (numToType[(uint8)content[position]] == TokenType.ASSIGNMENT) {
              ++position;
              type = TokenType.SHIFT_LEFT_ASSIGNMENT;
            } else {
              type = TokenType.SHIFT_LEFT;
            }
          } elif (tNext == TokenType.ASSIGNMENT) {
            type = TokenType.LESS_THAN_EQUAL;
            ++position;
          }
          break;
        }
        case TokenType.GREATER_THAN: {
          if (tNext == TokenType.GREATER_THAN) {
            ++position;
            if (numToType[(uint8)content[position]] == TokenType.ASSIGNMENT) {
              ++position;
              type = TokenType.SHIFT_RIGHT_ASSIGNMENT;
            } else {
              type = TokenType.SHIFT_RIGHT;
            }
          } elif (tNext == TokenType.ASSIGNMENT) {
            type = TokenType.GREATER_THAN_EQUAL;
            ++position;
          }
          break;
        }
        case TokenType.SUBTRACTION: {
          if (tNext == TokenType.GREATER_THAN) {
            ++position;
            type = TokenType.PTR_MEMBER_ACCESS;
          } elif (tNext == TokenType.SUBTRACTION) {
            ++position;
            if (prevType == TokenType.IDENTIFIER || prevType == TokenType.CLOSE_PAREN || prevType == TokenType.CLOSE_BRACKET) {
              type = TokenType.DECREMENT_POSTFIX;
            } else {
              type = TokenType.DECREMENT_PREFIX;
            }
          } elif (tNext == TokenType.ASSIGNMENT) {
            ++position;
            type = TokenType.SUBTRACTION_ASSIGNMENT;
          } elif (
            prevType != TokenType.IDENTIFIER &&
            prevType != TokenType.CLOSE_PAREN &&
            prevType != TokenType.CLOSE_BRACKET && !isLiteral(prevType)
          ) {
            type = TokenType.NEGATIVE;
          }
          break;
        }
        case TokenType.ADDITION: {
          if (tNext == TokenType.ADDITION) {
            ++position;
            if (prevType == TokenType.IDENTIFIER || prevType == TokenType.CLOSE_PAREN || prevType == TokenType.CLOSE_BRACE) {
              type = TokenType.INCREMENT_POSTFIX;
            } else {
              type = TokenType.INCREMENT_PREFIX;
            }
          } elif (tNext == TokenType.ASSIGNMENT) {
            ++position;
            type = TokenType.ADDITION_ASSIGNMENT;
          }
          break;
        }
        case TokenType.MULTIPLICATION: {
          if (tNext == TokenType.ASSIGNMENT) {
            ++position;
            type = TokenType.MULTIPLICATION_ASSIGNMENT;
          } elif (prevType == TokenType.OPEN_BRACE || prevType == TokenType.OPEN_PAREN || prevType == TokenType.OPEN_BRACKET || isBinaryOp(prevType)) {
            type = TokenType.DEREFERENCE;
          }
          break;
        }
        default: {
          break;
        }
      }
      break;
    }
  }

  if (position - tokenStartPos > UINT16_MAX) {
    // error
    exit(1);
  }
  prevType = type;
  return {tokenStartPos, (uint16)(position - tokenStartPos), type};
}

func moveToNextNonWhiteSpaceChar(): void {
  for (; position < content.size(); ++position) {
    const char c = content[position];
    if (c != ' ' && c != '\t') {
      return;
    }
  }
}

func movePastIdentifier(): void {
  for (; position < content.size(); ++position) {
    type: TokenType = numToType[(uint8)content[position]];
    if (type != TokenType.IDENTIFIER && type != TokenType.DECIMAL_NUMBER) {
      return;
    }
  }
}

func movePastNumber(): void {
  for (++position; position < content.size(); ++position) {
    char c: char = content[position];
    if (c < '0' || c > '9') {
      return;
    }
  }
}

func movePastHexNumber(): void {
  for (++position; position < content.size(); ++position) {
    c: char = content[position];
    if (!((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f'))) {
      return;
    }
  }
}

func movePastNewLine(): void {
  for (; position < content.size(); ++position) {
    if (content[position] == '\n') {
      newlinePositions.emplace_back(++position);
      return;
    }
  }
}

func extractToken(token: Token): char ptr {
  extracted.resize(token.length);
  content.copy(extracted.data(), token.length, token.position);
  return extracted.data();
}
